/* 
 * Copyright 2013 - @reno1148
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package twttr.reno1148.fridrichscrambler;

import java.awt.BorderLayout;
import java.util.HashMap;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;

/**
 * Micro scrambler specifically designed as a tool in learning and practicing OLL
 * and PLL.
 * @author theReno
 */
public class MainFrame extends javax.swing.JFrame implements InternalFrameListener {

    private final HashMap<Integer, String> OLL_BASE = new HashMap<Integer, String>();
    private HashMap<Integer, String> _ollPatterns = new HashMap<Integer, String>();
    private HashMap<Integer, String> _pllPatterns = new HashMap<Integer, String>();
    private final HashMap<Integer, String> PLL_BASE = new HashMap<Integer, String>();
    
    public MainFrame() {
        initComponents();
        setLocationRelativeTo(null);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("..::  Powered by        @reno1148  ::..");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                MainFrame mainFrame = new MainFrame();
                //session set up frame
                SessionSetupFrame sessionSetup = new SessionSetupFrame();
                sessionSetup.setVisible(true);
                sessionSetup.addInternalFrameListener(mainFrame);
                mainFrame.setSize(sessionSetup.getPreferredSize().width, sessionSetup.getPreferredSize().height);
                mainFrame.getContentPane().add(sessionSetup, BorderLayout.CENTER);
                mainFrame.setLocationRelativeTo(null);
                mainFrame.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void internalFrameOpened(InternalFrameEvent e) { }

    @Override
    public void internalFrameClosing(InternalFrameEvent e) { }

    @Override
    public void internalFrameClosed(InternalFrameEvent e) {
        if (e.getInternalFrame() instanceof SessionSetupFrame) {
            //get selected patterns and open practice frame with them
            SessionSetupFrame setupFrame = (SessionSetupFrame)e.getInternalFrame();            
            PracticeFrame practice = new PracticeFrame(setupFrame.getSelectedOlls(), setupFrame.getSelectedPlls());
            practice.setVisible(true);
            practice.addInternalFrameListener(this);
            this.getContentPane().add(practice, BorderLayout.CENTER);
        } else if (e.getInternalFrame() instanceof PracticeFrame) {
            //reopen session setup frame
            SessionSetupFrame sessionSetup = new SessionSetupFrame();
            sessionSetup.setVisible(true);
            sessionSetup.addInternalFrameListener(this);
            this.getContentPane().add(sessionSetup, BorderLayout.CENTER);
        }
    }

    @Override
    public void internalFrameIconified(InternalFrameEvent e) { }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent e) { }

    @Override
    public void internalFrameActivated(InternalFrameEvent e) { }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent e) { }
}
